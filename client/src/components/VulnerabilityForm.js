import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  TextField,
  Button,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Collapse,
} from '@mui/material';
import * as semver from 'semver';
import axios from 'axios';

function VulnerabilityForm() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    id: '',
    data: {
      summary: '',
      details: '',
      affected: [{
        package: {
          name: '',
          ecosystem: '',
        },
        ranges: [{
          type: 'ECOSYSTEM',
          events: [{
            introduced: '',
            fixed: '',
          }],
        }],
      }],
      references: [{
        url: '',
      }],
    },
  });
  const [versionError, setVersionError] = useState('');
  const [ecosystems, setEcosystems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (id && id !== 'new') {
      fetchVulnerability();
    }
    fetchEcosystems();
  }, [id]);

  const fetchEcosystems = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/ecosystems');
      setEcosystems(response.data);
      setLoading(false);
    } catch (err) {
      setError('Failed to load ecosystems');
      setLoading(false);
    }
  };

  const fetchVulnerability = async () => {
    try {
      const response = await axios.get(`http://localhost:3001/api/vulnerabilities/${id}`);
      setFormData(response.data);
    } catch (error) {
      console.error('Error fetching vulnerability:', error);
    }
  };

  const validateVersion = (version) => {
    if (!version) return true;
    try {
      // Check if it's a valid version or range
      if (version.includes('||') || version.includes(' - ')) {
        // Handle range specifiers
        const ranges = version.split('||').map(r => r.trim());
        return ranges.every(range => {
          if (range.includes(' - ')) {
            const [start, end] = range.split(' - ').map(v => v.trim());
            return semver.valid(start) && semver.valid(end);
          }
          return semver.validRange(range);
        });
      }
      return semver.valid(version) || semver.validRange(version);
    } catch (e) {
      return false;
    }
  };

  const handleChange = (path, value) => {
    setFormData(prev => {
      const newData = { ...prev };
      const keys = path.split('.');
      let current = newData;
      
      for (let i = 0; i < keys.length - 1; i++) {
        current = current[keys[i]];
      }
      
      current[keys[keys.length - 1]] = value;
      return newData;
    });

    // Validate version when it changes
    if (path.includes('introduced') || path.includes('fixed')) {
      const isValid = validateVersion(value);
      setVersionError(isValid ? '' : 'Invalid version or range format');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validate versions before submission
    const introduced = formData.data.affected[0].ranges[0].events[0].introduced;
    const fixed = formData.data.affected[0].ranges[0].events[0].fixed;
    
    if (!validateVersion(introduced) || !validateVersion(fixed)) {
      setVersionError('Please fix version format errors before submitting');
      return;
    }

    try {
      if (id && id !== 'new') {
        await axios.post(`http://localhost:3001/api/vulnerabilities/${id}`, formData);
      } else {
        await axios.post('http://localhost:3001/api/vulnerabilities', formData);
      }
      navigate('/');
    } catch (error) {
      console.error('Error saving vulnerability:', error);
    }
  };

  if (loading) {
    return <Typography>Loading...</Typography>;
  }

  if (error) {
    return <Alert severity="error">{error}</Alert>;
  }

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        {id === 'new' ? 'Create New Vulnerability' : 'Edit Vulnerability'}
      </Typography>

      <Paper sx={{ p: 3 }}>
        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="ID"
                value={formData.id}
                onChange={(e) => handleChange('id', e.target.value)}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Summary"
                value={formData.data.summary}
                onChange={(e) => handleChange('data.summary', e.target.value)}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Details"
                value={formData.data.details}
                onChange={(e) => handleChange('data.details', e.target.value)}
                multiline
                rows={4}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom>
                Affected Package
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <TextField
                    fullWidth
                    label="Package Name"
                    value={formData.data.affected[0].package.name}
                    onChange={(e) => handleChange('data.affected.0.package.name', e.target.value)}
                    required
                  />
                </Grid>
                <Grid item xs={6}>
                  <FormControl fullWidth>
                    <InputLabel>Ecosystem</InputLabel>
                    <Select
                      value={formData.data.affected[0].package.ecosystem}
                      onChange={(e) => handleChange('data.affected.0.package.ecosystem', e.target.value)}
                      label="Ecosystem"
                      required
                    >
                      {ecosystems.map((eco) => (
                        <MenuItem key={eco.id} value={eco.id}>
                          {eco.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={6}>
                  <TextField
                    fullWidth
                    label="Introduced Version"
                    value={formData.data.affected[0].ranges[0].events[0].introduced}
                    onChange={(e) => handleChange('data.affected.0.ranges.0.events.0.introduced', e.target.value)}
                    helperText="Version or range when vulnerability was introduced (e.g., 1.0.0, >=1.0.0 <2.0.0, 1.0.0 - 2.0.0)"
                    error={!!versionError}
                  />
                </Grid>
                <Grid item xs={6}>
                  <TextField
                    fullWidth
                    label="Fixed Version"
                    value={formData.data.affected[0].ranges[0].events[0].fixed}
                    onChange={(e) => handleChange('data.affected.0.ranges.0.events.0.fixed', e.target.value)}
                    helperText="Version or range when vulnerability was fixed (e.g., 2.0.0, >=2.0.0, 2.0.0 - 3.0.0)"
                    error={!!versionError}
                  />
                </Grid>
              </Grid>
              <Collapse in={!!versionError}>
                <Alert severity="error" sx={{ mt: 1 }}>
                  {versionError}
                </Alert>
              </Collapse>
            </Grid>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom>
                References
              </Typography>
              <TextField
                fullWidth
                label="Reference URL"
                value={formData.data.references[0].url}
                onChange={(e) => handleChange('data.references.0.url', e.target.value)}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
                <Button
                  variant="outlined"
                  onClick={() => navigate('/')}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  variant="contained"
                  disabled={!!versionError}
                >
                  Save
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Paper>
    </Box>
  );
}

export default VulnerabilityForm; 